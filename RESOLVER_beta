--B 1.0 [1.2]
local v0={};for v15=1,64 do v0[v15]={};end local v1=require("ffi");local v2=print;local v3=function(v17) return v2("AAI RESOLVER: "   .. v17 );end;local v4={};v1.cdef([[
    struct c_animstate {
        char pad[ 3 ];
        char m_bForceWeaponUpdate; //0x4
        char pad1[ 91 ];
        void* m_pBaseEntity; //0x60
        void* m_pActiveWeapon; //0x64
        void* m_pLastActiveWeapon; //0x68
        float m_flLastClientSideAnimationUpdateTime; //0x6C
        int m_iLastClientSideAnimationUpdateFramecount; //0x70
        float m_flAnimUpdateDelta; //0x74
        float m_flEyeYaw; //0x78
        float m_flPitch; //0x7C
        float m_flGoalFeetYaw; //0x80
        float m_flCurrentFeetYaw; //0x84
        float m_flCurrentTorsoYaw; //0x88
        float m_flUnknownVelocityLean; //0x8C
        float m_flLeanAmount; //0x90
        char pad2[ 4 ];
        float m_flFeetCycle; //0x98
        float m_flFeetYawRate; //0x9C
        char pad3[ 4 ];
        float m_fDuckAmount; //0xA4
        float m_fLandingDuckAdditiveSomething; //0xA8
        char pad4[ 4 ];
        float m_vOriginX; //0xB0
        float m_vOriginY; //0xB4
        float m_vOriginZ; //0xB8
        float m_vLastOriginX; //0xBC
        float m_vLastOriginY; //0xC0
        float m_vLastOriginZ; //0xC4
        float m_vVelocityX; //0xC8
        float m_vVelocityY; //0xCC
        char pad5[ 4 ];
        float m_flUnknownFloat1; //0xD4
        char pad6[ 8 ];
        float m_flUnknownFloat2; //0xE0
        float m_flUnknownFloat3; //0xE4
        float m_flUnknown; //0xE8
        float m_flSpeed2D; //0xEC
        float m_flUpVelocity; //0xF0
        float m_flSpeedNormalized; //0xF4
        float m_flFeetSpeedForwardsOrSideWays; //0xF8
        float m_flFeetSpeedUnknownForwardOrSideways; //0xFC
        float m_flTimeSinceStartedMoving; //0x100
        float m_flTimeSinceStoppedMoving; //0x104
        bool m_bOnGround; //0x108
        bool m_bInHitGroundAnimation; //0x109
        float m_flTimeSinceInAir; //0x10A
        float m_flLastOriginZ; //0x10E
        float m_flHeadHeightOrOffsetFromHittingGroundAnimation; //0x112
        float m_flStopToFullRunningFraction; //0x116
        char pad7[ 4 ]; //0x11A
        float m_flMagicFraction; //0x11E
        char pad8[ 60 ]; //0x122
        float m_flWorldForce; //0x15E
        char pad9[ 462 ]; //0x162
        float m_flMinYaw; //0x330
        float m_flMaxYaw; //0x334

        float velocity_subtract_x; //0x0330 
        float velocity_subtract_y; //0x0334 
        float velocity_subtract_z; //0x0338 
    };

    typedef void*(__thiscall* get_client_entity_t)(void*, int);

    typedef struct
    {
        float   m_anim_time;		
        float   m_fade_out_time;	
        int     m_flags;			
        int     m_activity;			
        int     m_priority;			
        int     m_order;			
        int     m_sequence;			
        float   m_prev_cycle;		
        float   m_weight;			
        float   m_weight_delta_rate;
        float   m_playback_rate;	
        float   m_cycle;			
        void* m_owner;			
        int     m_bits;				
    } C_AnimationLayer;

    typedef uintptr_t (__thiscall* GetClientEntityHandle_4242425_t)(void*, uintptr_t);
]]);function clamp(v18,v19,v20) return math.min(math.max(v18,v19),v20);end resolver={layers={[0]={},[1]={},[2]={},[3]={},[4]={},[5]={},[6]={},[7]={},[8]={},[9]={},[10]={},[11]={},[12]={},[13]={},[14]={},[15]={},[16]={},[17]={},[18]={},[19]={},[20]={},[21]={},[22]={},[23]={},[24]={},[25]={},[26]={},[27]={},[28]={},[29]={},[30]={},[31]={},[32]={},[33]={},[34]={},[35]={},[36]={},[37]={},[38]={},[39]={},[40]={},[40]={},[41]={},[42]={},[43]={},[44]={},[45]={},[46]={},[47]={},[48]={},[49]={},[50]={},[51]={},[52]={},[53]={},[54]={},[55]={},[56]={},[57]={},[58]={},[59]={},[60]={},[61]={},[62]={},[63]={},[64]={}},safepoints={},cache={}};function Approach(v21,v22,v23) v21=AngleModifier(v21);v22=AngleModifier(v22);local v24=v21-v22 ;if (v23<0) then v23= -v23;end if (v24< -180) then v24=v24 + 360 ;elseif (v24>180) then v24=v24-360 ;end if (v24>v23) then v22=v22 + v23 ;elseif (v24< -v23) then v22=v22-v23 ;else v22=v21;end return v22;end function NormalizeAngle(v25) if (v25==nil) then return 0;end while v25>180  do v25=v25-360 ;end while v25< -180  do v25=v25 + 360 ;end return v25;end function AngleDifference(v26,v27) local v28=math.fmod(v26-v27 ,360);if (v26>v27) then if (v28>=180) then v28=v28-360 ;end elseif (v28<= -180) then v28=v28 + 360 ;end return v28;end RawIEntityList=v1.cast("void***",client.create_interface("client.dll","VClientEntityList003"));IEntityList=v1.cast("GetClientEntityHandle_4242425_t",RawIEntityList[0][3]);function GetAddress(v29) if  not v29 then return;end return IEntityList(RawIEntityList,v29);end function GetAnimState(v30) if  not v30 then return;end return v1.cast("struct c_animstate**",GetAddress(v30) + 39264 )[0];end function GetMaxDesync(v31) local v32=GetAnimState(v31);if  not v32 then return 0;end local v33=clamp(v32.m_flFeetSpeedForwardsOrSideWays or 0 ,0,1);local v34=(((v32.m_flStopToFullRunningFraction *  -0.3) -0.2) * v33) + 1 ;local v35=v32.m_fDuckAmount;if (v35>0) then v34=v34 + (v35 * v33 * (0.5 -v34)) ;end return clamp(v34 or 0 ,0.5,1) or 0 ;end function GetSimulationTime(v36) local v37=GetAddress(v36);if (v37 and (v37~=nil)) then return entity.get_prop(player,"m_flSimulationTime",3),v1.cast("float*",v1.cast("uintptr_t",v37) + 620 )[0];else return 0;end end function GetChokedPackets(v38) local v39,v40=GetSimulationTime(v38);local v41=toticks(entity.get_prop(v38,"m_nTickBase")) -(v39 or 0) ;local v42=clamp(toticks(v41-client.latency() ) or 0 ,0,cvar['sv_maxusrcmdprocessticks']:get_string() -2 );return v42;end function AntiaimCorrection(v43,v44) if ( not v43 or  not entity.get_prop(v43,"m_angEyeAngles[1]") or  not client.current_threat() or  not globals.tickcount() or  not v44 or  not entity.get_local_player()) then return 0;end v0[v43][globals.tickcount()]=entity.get_prop(v43,"m_angEyeAngles[1]") or 0 ;return (v0[v43][globals.tickcount() -GetChokedPackets(v43) ] or v44) -v44 ;end function GetAnimlayers(v46,v47) if  not v46 then return;end return v1.cast("C_AnimationLayer**",v1.cast("uintptr_t",GetAddress(v46)) + 39264 )[0];end function AngleModifier(v48) return (360/65536) * bit.band(math.floor(v48 * (65536/360) ),65535) ;end function C_updateLayers(v49) resolver.layers[v49]=GetAnimlayers(v49);if  not resolver.layers[v49] then return;end for v105=1,12 do local v106=resolver.layers[v49][v105];if (v106 and v106.m_sequence and v106.m_playback_rate) then if  not resolver.layers[v49][v105] then resolver.layers[v49][v105]={};end resolver.layers[v49][v105].m_playback_rate=v106.m_playback_rate or resolver.layers[v49][v105].m_playback_rate ;resolver.layers[v49][v105].m_sequence=v106.m_sequence or resolver.layers[v49][v105].m_sequence ;break;end end end function C_updateSafety(v51,v52,v53) if ( not v51 or  not v52 or  not v53) then return;end if  not resolver.safepoints[v51] then resolver.safepoints[v51]={};end for v107=1,3 do if ((resolver.safepoints[v51][v107]==nil) or (resolver.safepoints[v51][v107].m_playback_rate==nil) or (resolver.safepoints[v51][v107].m_flDesync==nil)) then resolver.safepoints[v51][v107]={};resolver.safepoints[v51][v107].m_playback_rate=resolver.layers[v51][6].m_playback_rate;resolver.safepoints[v51][v107].m_flDesync=v53;end end if (v52<0) then resolver.safepoints[v51][3].m_flDesync= -v53;if (math.abs(resolver.safepoints[v51][3].m_flDesync)<=v53) then resolver.safepoints[v51][3].m_flDesync= -v53;resolver.safepoints[v51][3].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end resolver.safepoints[v51][3].m_playback_rate=resolver.layers[v51][6].m_playback_rate;elseif (v52>0) then resolver.safepoints[v51][2].m_flDesync=v53;if (resolver.safepoints[v51][2].m_flDesync>=v53) then resolver.safepoints[v51][2].m_flDesync=v53;resolver.safepoints[v51][2].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end resolver.safepoints[v51][2].m_playback_rate=resolver.layers[v51][6].m_playback_rate;else m_flDesync=v52 * v53 ;resolver.safepoints[v51][1].m_flDesync=m_flDesync;if (math.abs(resolver.safepoints[v51][1].m_flDesync)>=v53) then resolver.safepoints[v51][1].m_flDesync=m_flDesync;resolver.safepoints[v51][1].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end resolver.safepoints[v51][1].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end if (resolver.safepoints[v51][2].m_playback_rate and resolver.safepoints[v51][3].m_playback_rate) then m_flDesync=v52 * v53 ;if (m_flDesync>=resolver.safepoints[v51][3].m_flDesync) then if (m_flDesync<=resolver.safepoints[v51][2].m_flDesync) then resolver.safepoints[v51][1].m_flDesync=m_flDesync;if (math.abs(resolver.safepoints[v51][1].m_flDesync)>=v53) then resolver.safepoints[v51][1].m_flDesync=m_flDesync;resolver.safepoints[v51][1].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end resolver.safepoints[v51][1].m_playback_rate=resolver.layers[v51][6].m_playback_rate;end end end end function C_Transition(v54,v55,v56,v57) local v58=false;local v59=true;local v60=2;local v61=260;local v62=0.34;local v63=0.52;if ((v54>0) and (v54<1)) then if (v55==v58) then v54=v54 + (v56 * v60) ;else v54=v54-(v56 * v60) ;end v54=clamp(v54,0,1);end if ((v57>(v61 * v63)) and (v55==v59)) then v55=v58;v54=math.max(0.01,v54);elseif ((v57<(v61 * v63)) and (v55==v58)) then v55=v59;v54=math.min(0.99,v54);end return v54,v55;end function C_predictedFootYaw(v64,v65,v66,v67,v68,v69,v70) local v71=math.min(v68,260);local v72=clamp(v64, -360,360);local v73=AngleDifference(v65,v72);if (v73>v70) then v72=v65-math.abs(v70) ;elseif (v73<v69) then v72=v65 + math.abs(v69) ;end v72=NormalizeAngle(v72);local v74=globals.tickinterval();if ((v71>0.1) or (v68>100)) then v72=Approach(v65,v72,v74 * (30 + (20 * v67)) );else v72=Approach(v66,v72,v74 * 100 );end return v72;end function C_ResolverInstance(v75) local v76=GetAnimState(v75);local v77=v75;if ( not entity.get_local_player() or  not entity.is_alive(entity.get_local_player())) then return 0;end if ( not v77 or  not entity.is_alive(v77) or  not v76) then return 0;end C_updateLayers(v75);if  not resolver.cache[v75] then resolver.cache[v75]={};end local v78=0;local v79=0;local v80=0;local v81=0;local v82=GetMaxDesync(v75);local v83=v82 * 57.2957795131 ;local v84=v76.m_flEyeYaw;local v85=AngleDifference(v84,plist.get(v75,"Force body yaw value"));local v86=math.abs(v85);local v87=v82 * v76.m_flMaxYaw ;local v88=v82 * v76.m_flMinYaw ;if (v85<0) then v78= -1;v80=1;elseif (v85>0) then v78=1;v80= -1;elseif (v85==0) then v78=v80;end if ((v86>0) or ((resolver.cache[v75].m_flAbsAngleDiff or 0)>0)) then m_flCurrentAngle=math.max(v86,resolver.cache[v75].m_flAbsAngleDiff or 1 );if ((v86<=10) and ((resolver.cache[v75].m_flAbsAngleDiff or 0)<=10)) then v83=m_flCurrentAngle;elseif ((v86<=35) and ((resolver.cache[v75].m_flAbsAngleDiff or 0)<=35)) then v83=math.max(29,m_flCurrentAngle);else v83=clamp(m_flCurrentAngle,29,57.2957795131);end end resolver.cache[v75].m_flAbsAngleDiff=v86;v83=clamp(v83,1,v82 * 57.2957795131 );C_updateSafety(v75,v78,v83);if ((v78~=0) and resolver.safepoints[v75]) then if (resolver.safepoints[v75][1] and resolver.safepoints[v75][2] and resolver.safepoints[v75][3]) then if (resolver.safepoints[v75][1].m_playback_rate and resolver.safepoints[v75][2].m_playback_rate and resolver.safepoints[v75][3].m_playback_rate) then local v160=resolver.layers[v75][6].m_playback_rate;local v161=resolver.safepoints[v75][1].m_playback_rate;local v162=resolver.safepoints[v75][2].m_playback_rate;local v163=resolver.safepoints[v75][3].m_playback_rate;local v164=math.abs(v160-v161 );local v165=math.abs(v160-v162 );local v166=math.abs(v160-v163 );if ((v165-v166)>v164) then v79=1;v81= -1;elseif ((v165-v166)~=v164) then v79= -1;v81=1;else v79=v81;end end end end local v90=entity.get_prop(v77,"m_vecVelocity");resolver.cache[v75].m_flWalkToRunTransition,resolver.cache[v75].m_bWalkToRunTransitionState=C_Transition(resolver.cache[v75].m_flWalkToRunTransition or 0 ,resolver.cache[v75].m_bWalkToRunTransitionState or false ,globals.tickinterval(),math.min(v90,260));v4[v75]=v83 * v79 ;return C_predictedFootYaw(plist.get(v75,"Force body yaw value"),v84-(v83 * v79) ,entity.get_prop(v77,"m_flLowerBodyYawTarget") -(v83 * v79) ,resolver.cache[v75].m_flWalkToRunTransition,v90,v88,v87);end resolver_mode=1;local v5={"AAI [main]","AAI [experem]","AAI [experem 2]"};local v6=function(v94,v95,v96,v97) return string.format("%02x%02x%02x%02x",v94,v95,v96,v97);end;local v7=false;local v8=1;local v9={};local v10=false;local v11=1;for v98=1, #v5 do v9[v98]={h=0,m=0};end local v12="";for v100=1, #v5 do if (v100~= #v5) then v12=v12   .. v5[v100]   .. " or " ;else v12=v12   .. v5[v100] ;end end client.color_log(0,255,40,"AAI RESOLVER: For switch resolver mode (on "   .. v12   .. ") write [!Switch rm] or [!switch resolver mode] or [!resolver] or [!rm] or [!auto] for auto resolving" );client.set_event_callback("console_input",function(v101) if (v101:lower()=="!auto clear") then if (v7==true) then for v138=1, #v5 do v9[v138]={h=0,m=0};end v8=1;v10=false;v3("Memory cleared!");else v3("Select auto mode for clear memory!");end end if (v101:lower()=="!auto") then resolver_mode=0;v7=true;v10=false;v3("Switched to auto. Every 3 rounds switch on next resolver mode. If it's last resolver mode then select the best resolver mode");v3("For clear write [!auto clear]");end if ((v101:lower()=="!switch rm") or (v101:lower()=="!switch resolver mode") or (v101:lower()=="!resolver") or (v101:lower()=="!rm")) then v7=false;v10=false;resolver_mode=((resolver_mode< #v5) and (resolver_mode + 1)) or 1 ;v3("Seccuses switched on "   .. v5[resolver_mode]   .. " method resolver" );end end);last_angles={};local v13=function(v102) return last_angles[v102] or entity.get_prop(player,"m_angEyeAngles[1]") or 0 ;end;function Resolving() local v103=entity.get_local_player();if  not v103 then return;end for v108,v109 in pairs(entity.get_players(true)) do local v110=GetAnimState(v109);if (((v7==false) and (resolver_mode==1)) or ((v10==false) and (v8==1)) or (v11==1)) then if v110 then local v140=AntiaimCorrection(v109,v110.m_flEyeYaw);local v141=NormalizeAngle(C_ResolverInstance(v109) -v140 );if ((NormalizeAngle(C_ResolverInstance(v109) -v140 )>58) or (NormalizeAngle(C_ResolverInstance(v109) -v140 )< -58)) then plist.set(v109,"Force body yaw",false);else plist.set(v109,"Force body yaw",true);if (entity.get_steam64(v109)~=0) then plist.set(v109,"Force body yaw value",clamp( -58,v141,58));else plist.set(v109,"Force body yaw value",0);end end end elseif (((v7==false) and (resolver_mode==2)) or ((v10==false) and (v8==2)) or (v11==2)) then if (entity.is_dormant(v109) or  not entity.is_alive(v109) or  not v110) then return;end local v142=v110.m_flGoalFeetYaw;local v143=entity.get_prop(v109,"m_angEyeAngles[1]") or 0 ;local v144=entity.get_prop(v109,"m_vecVelocity[0]") or 0 ;local v145=v13(v109);local v146=v145 or v143 ;local v147=NormalizeAngle(v143-v142 );if (math.abs(v147)>35) then v146=v142;end local v148=math.min(math.abs(v144)/260 ,1);v146=(v146 * (1 -(v148 * 0.5))) + (v142 * v148 * 0.5) ;local v149=NormalizeAngle(v146-v145 );if (math.abs(v149)>10) then v146=v145 + (v149 * 0.25) ;else v146=v145 + (v149 * 0.5) ;end last_angles[v109]=(v147/2) + v149 ;plist.set(v109,"Force body yaw",true);plist.set(v109,"Force body yaw value",clamp( -58,58,NormalizeAngle(v146)));elseif (((v7==false) and (resolver_mode==3)) or ((v10==false) and (v8==3)) or (v11==3)) then local v167=entity.get_prop(v109,"m_angEyeAngles[1]");plist.set(v109,"Force body yaw",true);local v168=v110.m_flGoalFeetYaw;plist.set(v109,"Force body yaw value",clamp( -58,58,NormalizeAngle(v167-v168 )));end end end client.set_event_callback("net_update_start",function() if ( not entity.get_local_player() or  not entity.is_alive(entity.get_local_player()) or  not entity.get_players(true)) then return;end Resolving();end);local v14=0;misses_r,hit_r=0,0;client.set_event_callback("aim_miss",function() if (v7==true) then v9[v8].m=v9[v8].m + 1 ;return;end misses_r=misses_r + 1 ;end);client.set_event_callback("aim_hit",function() if (v7==true) then v9[v8].h=v9[v8].h + 1 ;return;end hit_r=hit_r + 1 ;end);client.set_event_callback("round_end",function() if (v7==true) then v14=v14 + 1 ;return;end if (((misses_r + 1)<hit_r) and ((misses_r + 1)>1)) then v3("Didn't reseting memory. Hitrate is normal.");return;end v3("Clear merory [Round end]");for v111=1,64 do v0[v111]={};end misses_r=0;hit_r=0;end);client.set_event_callback("paint_ui",function() if (v7==false) then return;end if ((v14>3) and (v10==false)) then v10=v8== #v5 ;v8=(( #v5~=v8) and (v8 + 1)) or  #v5 ;v3("Switching on next resolver mode. [w="   .. v5[v8-1 ]   .. ";n="   .. v5[v8] );v14=0;end local v104={client.screen_size()};if v10 then local v120=1;for v127=1, #v5 do if ((v9[v127].h/v9[v127].m)>(v9[v127].h/v9[v120].m)) then v120=v127;end end v11=v120;renderer.text(10,(v104[2]/2) + 20 ,255,255,255,255,nil,999,"Selected mode: "   .. v5[v11]:sub(5)   .. "" );else renderer.text(10,(v104[2]/2) + 20 ,255,255,255,255,nil,999,"Testing mode: "   .. v5[v8]:sub(5) );end end);
